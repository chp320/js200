/*
    [ ES6의 향상된 객체 문법 알아보기 - 비구조화 할당 ]
    - 배열이나 객체의 값을 새로운 변수에 쉽게 할당하는 방법 => 객체 비구조화 할당 / 배열 비구조화 할당. 이 있음
    - 객체 비구조화 할당 : 중괄호 {} 안에 속성 이름을 넣어 객체의 여러 속성을 한 번에 가져옴
    - 배열 비구조화 할당 : 대괄호 [] 안에 속성 이름을 넣어 객체의 여러 속성을 한 번에 가져옴. 이때 대괄호 안의 변수에 배열 요소가 순서대로 하나씩 할당됨
*/

// < 객체 비구조화 할당 >>
// obj 객체에 a, b, c, d, e 속성 정의
var obj = {a: 1, b: 2, c: 30, d: 44, e: 5} ;

// 비구조화를 통해 obj 객체에서 속성 a, c의 값을 가져와 변수에 할당함 => 중괄호 안에 원하는 속성명을 넣으면 해당 속성명에 따른 값을 각 변수에 할당
var {a, c} = obj ;
console.log(`a >>> ${a}`) ;
console.log(`c >>> ${c}`) ;

// obj 객체에서 기존 속성명의 값을 가져와서 새로운 변수명으로 할당
// 구분자 : 를 기준으로 왼쪽에 객체의 속성명을, 오른쪽에 새로운 변수명을 넣음
// 만일, 가져올 객체(obj)에 속성이 없는 경우 default 로 정의된 값이 설정됨 (ex. f:newF=5)
var {a:newA=10, f:newF=5} = obj ;
console.log(`newA >>> ${newA}`) ;
console.log(`newF >>> ${newF}`) ;

/************************************************************************/
console.log('*********************************') ;

// < 배열 비구조화 할당 >
var arr = [1, 2, 30, 44, 5] ;

var [b, c, ...rest] = arr ; // arr 배열이 0번 인덱스부터 순서대로 b, c 요소에 값을 할당함. 단, 나머지 변수 지시자(...) 를 사용함으로써 rest 변수에 30, 44, 5 가 할당됨.
console.log(`0) b >>> ${b}`) ;  // 1
console.log(`0) c >>> ${c}`) ;  // 2
console.log(`0) rest >>>> ${rest}`) ;   // 30, 44, 5

var [a=10, f=9] = [1] ; // 배열값 [1]을 비구조화하여 a 변수에 첫 번째 요소 1이 할당됨. 두 번째 변수 f에는 할당할 값이 없기 때문에 기본값 f=9 가 설정됨.
console.log(`1) a >>> ${a}`) ;  // 1
console.log(`1) f >>> ${f}`) ;  // 9

[a, f] = [f, a] ;   // 앞서 정의된 배열 값 [f, a] 가 [9, 1]이고... 이를 [a, f] 에 순서대로 할당함
console.log(`2) a >>> ${a}`) ;  // 9
console.log(`2) f >>> ${f}`) ;  // 1

function getArr() {
    return [1, 2, 3, 4, 5, 6] ;
}
[a, , , , , f] = getArr() ; // [1, 2, 3, 4, 5, 6] 을 할당함. 일부 배열요소 무시.
console.log(`3) a >>> ${a}`) ;  // 1
console.log(`3) f >>> ${f}`) ;  // 6

